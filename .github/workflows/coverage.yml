#unit_test_coverage:
#  stage: tests
#  needs: [ ]
#  coverage: '/(?m)^TOTAL.*\s+(\d+\%)$/'
#  tags:
#    - docker
#  script:
#    - echo "running unit tests"
#    - pip3 install --upgrade conan==1.59.0
#    - mkdir build && cd build
#    - cmake -DCMAKE_BUILD_TYPE=Debug -Dcoverage=ON ..
#    - cmake --build . -- -j $(nproc --all)
#    - make -j $(nproc --all) unit_and_integration_tests_coverage
#    - cd ..
#    - gcovr -r . -f src/ -f include/ -e src/main.cpp -e include/mocks/
#    - gcovr -r . -f src/ -f include/ -e include/mocks/ -e tests/ --exclude-throw-branches --exclude-unreachable-branches --xml -o coverage.xml
#    - cppcheck -v --enable=all --force -I include/ src/ --xml-version=2 . 2> cppcheck.xml
#    - run-clang-tidy -p ./build/ -checks='*' ./include/ ./src/ > clang-tidy.txt || true
#    - mkdir valgrind_reports
#    - valgrind_flags='--leak-check=yes --max-threads=1500'
#    - for test_binary in 'build/bin'/*; do timeout --kill-after=5 60 valgrind $valgrind_flags --xml=yes --xml-file=${test_binary}_valgrind.xml $test_binary || true; done
#    - mv build/bin/*valgrind.xml valgrind_reports/
#  artifacts:
#    paths:
#      - cppcheck.xml
#      - coverage.xml
#      - clang-tidy.txt
#      - valgrind_reports


name: Coverage
run-name: Coverage
on: [push]
jobs:
  Coverage:
    runs-on: self-hosted
    steps:
      - run: echo "Job is running on a ${{ runner.os }} runner"
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Fetch git submodules
        run: |
          git submodule update --init --recursive
      - name: Restore cached tests build files
        id: tests-build-files-restore
        uses: actions/cache/restore@v4
        with:
          path: build
          key: coverage-build
      - name: Files in the repository
        run: |
          ls ${{ github.workspace }}
      - name: Build CMake project
        run: |
          cmake -S . -B build -DBUILD_TESTING=ON -Dcoverage=ON
          cmake --build build -j $(nproc --all)
      - name: Run coverage
        run: |
          cd build
          make -j $(nproc --all) Vera-Tests-Coverage
          cd ..
          gcovr -r . -f Source/ -e Tests/ -e ThirdParty/ --exclude-throw-branches --exclude-unreachable-branches --xml -o coverage.xml
      - name: Uploading coverage results
        uses: actions/upload-artifact@v4.3.3
        with:
          name: coverage-results
          path: coverage.xml
      - name: Save tests build files
        id: tests-build-files-save
        uses: actions/cache/save@v4
        with:
          path: |
            build
          key: tests-build-${{ hashFiles('build') }}