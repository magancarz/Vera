#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "Commons/Common.h"

layout(binding = 0, scalar) buffer Vertices  { Vertex v[]; } vertices;

layout(push_constant) uniform ShaderInformation { float time; } push_constant;

void main()
{
    Vertex v0 = vertices.v[gl_GlobalInvocationID.x];

    const float PI = 3.14159265;
    const float signY = (v0.position.y >= 0 ? 1 : -1);
    const float radius = length(v0.position.xz);
    const float argument = push_constant.time * 4 + radius * PI;
    const float s = sin(argument);
    v0.position.y = signY * abs(s) * 0.5;

    if(radius == 0.0f)
    {
        v0.normal = vec3(0.0f, signY, 0.0f);
    }
    else
    {
        const float c = cos(argument);
        const float xzFactor = -PI * s * c;
        const float yFactor = 2.0f * signY * radius * abs(s);
        v0.normal = normalize(vec3(v0.position.x * xzFactor, yFactor, v0.position.z * xzFactor));
    }

    vertices.v[gl_GlobalInvocationID.x] = v0;
}